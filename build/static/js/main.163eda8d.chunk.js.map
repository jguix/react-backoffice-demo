{"version":3,"sources":["modules/product/product.actions.ts","modules/customer/customer.actions.ts","modules/product/product.reducer.ts","modules/auth/auth.actions.ts","modules/customer/customer.reducer.ts","modules/shared/shared.domain.ts","modules/customer-list/customer-list.reducer.ts","modules/product-list/product-list.reducer.ts","store/store.ts","modules/auth/auth.reducer.ts","modules/auth/components/private-route.component.tsx","modules/auth/auth.commands.ts","modules/auth/components/login.component.tsx","modules/customer/customer.api.ts","modules/customer/customer.commands.ts","modules/customer-list/components/customer-list-item.component.tsx","modules/shared/components/page-header.component.tsx","modules/customer-list/components/customer-list.component.tsx","modules/product/product.api.ts","modules/product/product.commands.ts","modules/product-list/components/product-list-item.component.tsx","modules/product-list/components/product-list.component.tsx","modules/customer/components/customer.component.tsx","modules/header/components/header.component.tsx","modules/product/components/product.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProductActionTypes","CustomerActionTypes","productActions","type","CLEAR_PRODUCTS","payload","LOAD_PRODUCTS","LOAD_PRODUCT","SAVE_PRODUCT","UPDATE_PRODUCT","DELETE_PRODUCT","productReducer","combineReducers","byId","state","action","loadProductsPayload","loadedProducts","products","loadedProductsMap","reduce","map","product","id","loadProductPayload","loadedProduct","saveProductPayload","savedProductId","productId","savedProduct","updateProductPayload","updatedProduct","deleteProductPayload","mutableState","AuthActionTypes","customerActions","CLEAR_CUSTOMERS","LOAD_CUSTOMERS","LOAD_CUSTOMER","SAVE_CUSTOMER","UPDATE_CUSTOMER","DELETE_CUSTOMER","customerReducer","loadCustomersPayload","loadedCustomers","customers","loadedCustomersMap","customer","loadCustomerPayload","loadedCustomer","saveCustomerPayload","savedCustomerId","customerId","savedCustomer","updateCustomerPayload","updatedCustomer","deleteCustomerPayload","repeatedItemsComparator","value","index","self","indexOf","arrayDistinct","input","filter","customerListReducer","customerIds","productListReducer","productIds","authActions","AUTH_LOGIN","AUTH_LOGOUT","entitiesReducer","uiReducer","auth","isAuthenticated","token","loginPayload","customerList","productList","rootReducer","entities","ui","store","createStore","PrivateRoute","component","rest","useSelector","render","to","authCommands","Promise","resolve","dispatch","BOLogin","history","useHistory","className","name","onClick","then","push","customerApi","axios","delete","get","data","page","limit","order","post","put","isPageCached","getState","length","isEntityCached","customerCommands","reject","invalidateCache","error","console","log","BOCustomerListItem","key","email","address","BOPageTitle","title","backgroundImageUrl","src","BOCustomerList","useState","isLoading","setLoading","isError","setError","setPage","useEffect","productApi","productCommands","BOProductListItem","price","BOProductList","BOCustomer","idString","useParams","parseInt","undefined","loadingMessage","setLoadingMessage","modifiedCustomer","setModifiedCustomer","setLoadingStatus","status","message","onFieldChange","event","field","target","navigateBack","goBack","navigateToCustomers","onSubmit","disabled","onChange","BOHeader","BOProduct","photo","modifiedProduct","setModifiedProduct","navigateToProducts","App","exact","path","from","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.163eda8d.chunk.js","sourcesContent":["import { Product } from './product.types';\n\nexport enum ProductActionTypes {\n  LOAD_PRODUCTS = 'LOAD_PRODUCTS',\n  LOAD_PRODUCT = 'LOAD_PRODUCT',\n  SAVE_PRODUCT = 'SAVE_PRODUCT',\n  UPDATE_PRODUCT = 'UPDATE_PRODUCT',\n  DELETE_PRODUCT = 'DELETE_PRODUCT',\n  CLEAR_PRODUCTS = 'CLEAR_PRODUCTS',\n}\n\nexport type ClearProductsAction = {\n  type: ProductActionTypes.CLEAR_PRODUCTS;\n};\n\nconst clearProductsAction = (): ClearProductsAction => {\n  return {\n    type: ProductActionTypes.CLEAR_PRODUCTS,\n  };\n};\n\nexport type LoadProductsPayload = {\n  products: Product[];\n};\n\nexport type LoadProductsAction = {\n  type: ProductActionTypes.LOAD_PRODUCTS;\n  payload: LoadProductsPayload;\n};\n\nconst loadProductsAction = (payload: LoadProductsPayload): LoadProductsAction => {\n  return {\n    payload,\n    type: ProductActionTypes.LOAD_PRODUCTS,\n  };\n};\n\nexport type LoadProductPayload = {\n  product: Product;\n};\n\nexport type LoadProductAction = {\n  type: ProductActionTypes.LOAD_PRODUCT;\n  payload: LoadProductPayload;\n};\n\nconst loadProductAction = (payload: LoadProductPayload): LoadProductAction => {\n  return {\n    payload,\n    type: ProductActionTypes.LOAD_PRODUCT,\n  };\n};\n\nexport type SaveProductPayload = {\n  productId: number;\n  product: Product;\n};\n\nexport type SaveProductAction = {\n  type: ProductActionTypes.SAVE_PRODUCT;\n  payload: SaveProductPayload;\n};\n\nconst saveProductAction = (payload: SaveProductPayload): SaveProductAction => {\n  return {\n    payload,\n    type: ProductActionTypes.SAVE_PRODUCT,\n  };\n};\n\nexport type UpdateProductPayload = {\n  product: Product;\n};\n\nexport type UpdateProductAction = {\n  type: ProductActionTypes.UPDATE_PRODUCT;\n  payload: UpdateProductPayload;\n};\n\nconst updateProductAction = (payload: UpdateProductPayload): UpdateProductAction => {\n  return {\n    payload,\n    type: ProductActionTypes.UPDATE_PRODUCT,\n  };\n};\n\nexport type DeleteProductPayload = {\n  productId: number;\n};\n\nexport type DeleteProductAction = {\n  type: ProductActionTypes.DELETE_PRODUCT;\n  payload: DeleteProductPayload;\n};\n\nconst deleteProductAction = (payload: DeleteProductPayload): DeleteProductAction => {\n  return {\n    payload,\n    type: ProductActionTypes.DELETE_PRODUCT,\n  };\n};\n\nexport const productActions = {\n  clearProductsAction,\n  loadProductsAction,\n  loadProductAction,\n  saveProductAction,\n  updateProductAction,\n  deleteProductAction,\n};\n","import { Customer } from './customer.types';\n\nexport enum CustomerActionTypes {\n  LOAD_CUSTOMERS = 'LOAD_CUSTOMERS',\n  LOAD_CUSTOMER = 'LOAD_CUSTOMER',\n  SAVE_CUSTOMER = 'SAVE_CUSTOMER',\n  UPDATE_CUSTOMER = 'UPDATE_CUSTOMER',\n  DELETE_CUSTOMER = 'DELETE_CUSTOMER',\n  CLEAR_CUSTOMERS = 'CLEAR_CUSTOMERS',\n}\n\nexport type ClearCustomersAction = {\n  type: CustomerActionTypes.CLEAR_CUSTOMERS;\n};\n\nconst clearCustomersAction = (): ClearCustomersAction => {\n  return {\n    type: CustomerActionTypes.CLEAR_CUSTOMERS,\n  };\n};\n\nexport type LoadCustomersPayload = {\n  customers: Customer[];\n};\n\nexport type LoadCustomersAction = {\n  type: CustomerActionTypes.LOAD_CUSTOMERS;\n  payload: LoadCustomersPayload;\n};\n\nconst loadCustomersAction = (payload: LoadCustomersPayload): LoadCustomersAction => {\n  return {\n    payload,\n    type: CustomerActionTypes.LOAD_CUSTOMERS,\n  };\n};\n\nexport type LoadCustomerPayload = {\n  customer: Customer;\n};\n\nexport type LoadCustomerAction = {\n  type: CustomerActionTypes.LOAD_CUSTOMER;\n  payload: LoadCustomerPayload;\n};\n\nconst loadCustomerAction = (payload: LoadCustomerPayload): LoadCustomerAction => {\n  return {\n    payload,\n    type: CustomerActionTypes.LOAD_CUSTOMER,\n  };\n};\n\nexport type SaveCustomerPayload = {\n  customerId: number;\n  customer: Customer;\n};\n\nexport type SaveCustomerAction = {\n  type: CustomerActionTypes.SAVE_CUSTOMER;\n  payload: SaveCustomerPayload;\n};\n\nconst saveCustomerAction = (payload: SaveCustomerPayload): SaveCustomerAction => {\n  return {\n    payload,\n    type: CustomerActionTypes.SAVE_CUSTOMER,\n  };\n};\n\nexport type UpdateCustomerPayload = {\n  customer: Customer;\n};\n\nexport type UpdateCustomerAction = {\n  type: CustomerActionTypes.UPDATE_CUSTOMER;\n  payload: UpdateCustomerPayload;\n};\n\nconst updateCustomerAction = (payload: UpdateCustomerPayload): UpdateCustomerAction => {\n  return {\n    payload,\n    type: CustomerActionTypes.UPDATE_CUSTOMER,\n  };\n};\n\nexport type DeleteCustomerPayload = {\n  customerId: number;\n};\n\nexport type DeleteCustomerAction = {\n  type: CustomerActionTypes.DELETE_CUSTOMER;\n  payload: DeleteCustomerPayload;\n};\n\nconst deleteCustomerAction = (payload: DeleteCustomerPayload): DeleteCustomerAction => {\n  return {\n    payload,\n    type: CustomerActionTypes.DELETE_CUSTOMER,\n  };\n};\n\nexport const customerActions = {\n  clearCustomersAction,\n  loadCustomersAction,\n  loadCustomerAction,\n  saveCustomerAction,\n  updateCustomerAction,\n  deleteCustomerAction,\n};\n","import { Product } from './product.types';\nimport {\n  ProductActionTypes,\n  LoadProductsAction,\n  LoadProductAction,\n  UpdateProductAction,\n  SaveProductAction,\n  DeleteProductAction,\n} from './product.actions';\nimport { NumberIndexed } from '../shared/shared.types';\nimport { AnyAction, combineReducers, Reducer } from 'redux';\n\nexport type ProductState = {\n  byId: NumberIndexed<Product>;\n};\n\nexport type ProductStore = {\n  products: ProductState;\n};\n\nexport const productByIdReducer = (state: NumberIndexed<Product> = {}, action: AnyAction) => {\n  switch (action.type) {\n    case ProductActionTypes.LOAD_PRODUCTS:\n      const { payload: loadProductsPayload } = action as LoadProductsAction;\n      const { products: loadedProducts } = loadProductsPayload;\n      const loadedProductsMap = loadedProducts.reduce((map, product) => ({ ...map, [product.id]: product }), {});\n\n      return {\n        ...state,\n        ...loadedProductsMap,\n      };\n\n    case ProductActionTypes.LOAD_PRODUCT:\n      const { payload: loadProductPayload } = action as LoadProductAction;\n      const { product: loadedProduct } = loadProductPayload;\n\n      return {\n        ...state,\n        [loadedProduct.id]: loadedProduct,\n      };\n\n    case ProductActionTypes.SAVE_PRODUCT:\n      const { payload: saveProductPayload } = action as SaveProductAction;\n      const { productId: savedProductId, product: savedProduct } = saveProductPayload;\n\n      return {\n        ...state,\n        [savedProductId]: { ...savedProduct, id: savedProductId },\n      };\n\n    case ProductActionTypes.UPDATE_PRODUCT:\n      const { payload: updateProductPayload } = action as UpdateProductAction;\n      const { product: updatedProduct } = updateProductPayload;\n\n      return {\n        ...state,\n        [updatedProduct.id]: { ...updatedProduct },\n      };\n\n    case ProductActionTypes.DELETE_PRODUCT:\n      const { payload: deleteProductPayload } = action as DeleteProductAction;\n      const { productId } = deleteProductPayload;\n      const mutableState = { ...state };\n      delete mutableState[productId];\n\n      return {\n        ...mutableState,\n      };\n  }\n\n  return state;\n};\n\nexport const productReducer: Reducer<ProductState> = combineReducers({\n  byId: productByIdReducer,\n});\n","export enum AuthActionTypes {\n  AUTH_LOGIN = 'AUTH_LOGIN',\n  AUTH_LOGOUT = 'AUTH_LOGOUT',\n}\n\nexport type LoginPayload = {\n  token: string;\n};\n\nexport type LoginAction = {\n  type: AuthActionTypes.AUTH_LOGIN;\n  payload: LoginPayload;\n};\n\nconst loginAction = (payload: LoginPayload): LoginAction => {\n  return {\n    payload,\n    type: AuthActionTypes.AUTH_LOGIN,\n  };\n};\n\nexport type LogoutAction = {\n  type: AuthActionTypes.AUTH_LOGOUT;\n};\n\nconst logoutAction = (): LogoutAction => {\n  return {\n    type: AuthActionTypes.AUTH_LOGOUT,\n  };\n};\n\nexport const authActions = {\n  loginAction,\n  logoutAction,\n};\n","import { Customer } from './customer.types';\nimport {\n  CustomerActionTypes,\n  LoadCustomersAction,\n  LoadCustomerAction,\n  UpdateCustomerAction,\n  SaveCustomerAction,\n  DeleteCustomerAction,\n} from './customer.actions';\nimport { NumberIndexed } from '../shared/shared.types';\nimport { AnyAction, combineReducers, Reducer } from 'redux';\n\nexport type CustomerState = {\n  byId: NumberIndexed<Customer>;\n};\n\nexport type CustomerStore = {\n  customers: CustomerState;\n};\n\nexport const customerByIdReducer = (state: NumberIndexed<Customer> = {}, action: AnyAction) => {\n  switch (action.type) {\n    case CustomerActionTypes.LOAD_CUSTOMERS:\n      const { payload: loadCustomersPayload } = action as LoadCustomersAction;\n      const { customers: loadedCustomers } = loadCustomersPayload;\n      const loadedCustomersMap = loadedCustomers.reduce((map, customer) => ({ ...map, [customer.id]: customer }), {});\n\n      return {\n        ...state,\n        ...loadedCustomersMap,\n      };\n\n    case CustomerActionTypes.LOAD_CUSTOMER:\n      const { payload: loadCustomerPayload } = action as LoadCustomerAction;\n      const { customer: loadedCustomer } = loadCustomerPayload;\n\n      return {\n        ...state,\n        [loadedCustomer.id]: loadedCustomer,\n      };\n\n    case CustomerActionTypes.SAVE_CUSTOMER:\n      const { payload: saveCustomerPayload } = action as SaveCustomerAction;\n      const { customerId: savedCustomerId, customer: savedCustomer } = saveCustomerPayload;\n\n      return {\n        ...state,\n        [savedCustomerId]: { ...savedCustomer, id: savedCustomerId },\n      };\n\n    case CustomerActionTypes.UPDATE_CUSTOMER:\n      const { payload: updateCustomerPayload } = action as UpdateCustomerAction;\n      const { customer: updatedCustomer } = updateCustomerPayload;\n\n      return {\n        ...state,\n        [updatedCustomer.id]: { ...updatedCustomer },\n      };\n\n    case CustomerActionTypes.DELETE_CUSTOMER:\n      const { payload: deleteCustomerPayload } = action as DeleteCustomerAction;\n      const { customerId } = deleteCustomerPayload;\n      const mutableState = { ...state };\n      delete mutableState[customerId];\n\n      return {\n        ...mutableState,\n      };\n  }\n\n  return state;\n};\n\nexport const customerReducer: Reducer<CustomerState> = combineReducers({\n  byId: customerByIdReducer,\n});\n","const repeatedItemsComparator = <T>(value: T, index: number, self: Array<T>): boolean => {\n  return self.indexOf(value) === index;\n};\n\nexport const arrayDistinct = <T>(input: Array<T>): Array<T> => input.filter(repeatedItemsComparator);\n","import { AnyAction, combineReducers, Reducer } from 'redux';\nimport { CustomerActionTypes, DeleteCustomerAction, LoadCustomersAction } from '../customer/customer.actions';\nimport { arrayDistinct } from '../shared/shared.domain';\n\nexport type CustomerListState = {\n  customerIds: number[];\n};\n\nexport type CustomerListStore = {\n  customerList: CustomerListState;\n};\n\nexport const customerIdsReducer = (state: number[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case CustomerActionTypes.LOAD_CUSTOMERS:\n      const { payload: loadCustomersPayload } = action as LoadCustomersAction;\n      const { customers } = loadCustomersPayload;\n      const customerIds = customers.map((customer) => customer.id);\n      return arrayDistinct([...state, ...customerIds]);\n\n    case CustomerActionTypes.DELETE_CUSTOMER:\n      const { payload: deleteCustomerPayload } = action as DeleteCustomerAction;\n      const { customerId } = deleteCustomerPayload;\n      return [...state.filter((id) => id !== customerId)];\n\n    case CustomerActionTypes.CLEAR_CUSTOMERS:\n      return [];\n  }\n\n  return state;\n};\n\nexport const customerListReducer: Reducer<CustomerListState> = combineReducers({\n  customerIds: customerIdsReducer,\n});\n","import { AnyAction, combineReducers, Reducer } from 'redux';\nimport { ProductActionTypes, DeleteProductAction, LoadProductsAction } from '../product/product.actions';\nimport { arrayDistinct } from '../shared/shared.domain';\n\nexport type ProductListState = {\n  productIds: number[];\n};\n\nexport type ProductListStore = {\n  productList: ProductListState;\n};\n\nexport const productIdsReducer = (state: number[] = [], action: AnyAction) => {\n  switch (action.type) {\n    case ProductActionTypes.LOAD_PRODUCTS:\n      const { payload: loadProductsPayload } = action as LoadProductsAction;\n      const { products } = loadProductsPayload;\n      const productIds = products.map((product) => product.id);\n      return arrayDistinct([...state, ...productIds]);\n\n    case ProductActionTypes.DELETE_PRODUCT:\n      const { payload: deleteProductPayload } = action as DeleteProductAction;\n      const { productId } = deleteProductPayload;\n      return [...state.filter((id) => id !== productId)];\n\n    case ProductActionTypes.CLEAR_PRODUCTS:\n      return [];\n  }\n\n  return state;\n};\n\nexport const productListReducer: Reducer<ProductListState> = combineReducers({\n  productIds: productIdsReducer,\n});\n","import { combineReducers, Reducer } from 'redux';\nimport { createStore } from 'redux';\nimport { productReducer, ProductStore } from '../modules/product/product.reducer';\nimport { customerReducer, CustomerStore } from '../modules/customer/customer.reducer';\nimport { customerListReducer, CustomerListStore } from '../modules/customer-list/customer-list.reducer';\nimport { productListReducer, ProductListStore } from '../modules/product-list/product-list.reducer';\nimport { authReducer, AuthStore } from '../modules/auth/auth.reducer';\n\nexport type EntitiesStore = CustomerStore & ProductStore;\n\nexport type UIStore = AuthStore & CustomerListStore & ProductListStore;\n\nexport type ApplicationStore = {\n  entities: EntitiesStore;\n  ui: UIStore;\n};\n\nexport const entitiesReducer = combineReducers({\n  customers: customerReducer,\n  products: productReducer,\n});\n\nexport const uiReducer = combineReducers({\n  auth: authReducer,\n  customerList: customerListReducer,\n  productList: productListReducer,\n});\n\nexport const rootReducer: Reducer<ApplicationStore> = combineReducers({\n  entities: entitiesReducer,\n  ui: uiReducer,\n});\n\nexport const store = createStore(rootReducer);\n","import { AuthActionTypes, LoginAction } from './auth.actions';\nimport { AnyAction } from 'redux';\n\nexport type AuthState = {\n  isAuthenticated: boolean;\n  token: string;\n};\n\nexport type AuthStore = {\n  auth: AuthState;\n};\n\nexport const authReducer = (state: AuthState = { isAuthenticated: false, token: '' }, action: AnyAction) => {\n  switch (action.type) {\n    case AuthActionTypes.AUTH_LOGIN:\n      const { payload: loginPayload } = action as LoginAction;\n      const { token } = loginPayload;\n\n      return {\n        isAuthenticated: true,\n        token,\n      };\n\n    case AuthActionTypes.AUTH_LOGOUT:\n      return {\n        isAuthenticated: false,\n        token: '',\n      };\n  }\n\n  return state;\n};\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\nimport { ApplicationStore } from '../../../store/store';\n\nexport const PrivateRoute: FC<RouteProps> = ({ component, ...rest }) => {\n  const isAuthenticated = useSelector<ApplicationStore, boolean>((state) => state.ui.auth.isAuthenticated);\n\n  return isAuthenticated ? (\n    <Route {...rest} component={component} />\n  ) : (\n    <Route {...rest} render={() => <Redirect to={'/login'} />} />\n  );\n};\n","import { store } from '../../store/store';\nimport { authActions } from './auth.actions';\n\nconst login = (): Promise<void> => {\n  return new Promise((resolve) => {\n    store.dispatch(authActions.loginAction({ token: '1234567890' }));\n    resolve();\n  });\n};\n\nconst logout = (): Promise<void> => {\n  return new Promise((resolve) => {\n    store.dispatch(authActions.logoutAction());\n    resolve();\n  });\n};\n\nexport const authCommands = {\n  login,\n  logout,\n};\n","import React, { FC } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { authCommands } from '../auth.commands';\nimport './login.component.scss';\n\nexport const BOLogin: FC = () => {\n  const history = useHistory();\n\n  const login = () => {\n    authCommands.login().then(() => history.push('/'));\n  };\n\n  return (\n    <div className=\"loginPage\">\n      <div className=\"loginContent\">\n        <div className=\"boTitle\">backoffice</div>\n\n        <div className=\"loginForm\">\n          <form>\n            <div className=\"loginTitle\">Start Session</div>\n\n            <div className=\"loginLabel\">\n              <label>Email</label>\n            </div>\n            <input className=\"loginField\" type=\"text\" name=\"username\" />\n\n            <div className=\"loginLabel\">\n              <label>Password</label>\n            </div>\n            <input className=\"loginField\" type=\"password\" name=\"password\" />\n\n            <button className=\"loginButton\" onClick={login}>\n              Login\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import axios from 'axios';\nimport { OrderType } from '../shared/shared.types';\nimport { Customer } from './customer.types';\n\nconst loadCustomers = (page: number, limit: number, order: OrderType): Promise<Customer[]> =>\n  axios.get<Customer[]>(`/customers?_page=${page}&_limit=${limit}&_sort=name&_order=${order}`).then(({ data }) => data);\n\nconst loadCustomer = (customerId: number): Promise<Customer> =>\n  axios.get(`/customers/${customerId}`).then(({ data }) => data);\n\nconst saveCustomer = (customer: Customer): Promise<number> =>\n  axios.post('/customers', customer).then(({ data }) => data);\n\nconst updateCustomer = (customer: Customer): Promise<number> =>\n  axios.put(`/customers/${customer.id}/`, customer).then(({ data }) => data);\n\nconst deleteCustomer = (customerId: number): Promise<void> =>\n  axios.delete(`/customers/${customerId}`).then(() => undefined);\n\nexport const customerApi = { deleteCustomer, loadCustomer, loadCustomers, saveCustomer, updateCustomer };\n","import { customerActions } from './customer.actions';\nimport { OrderType } from '../shared/shared.types';\nimport { store } from '../../store/store';\nimport { customerApi } from './customer.api';\nimport { Customer } from './customer.types';\n\nconst clearCustomers = (): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    store.dispatch(customerActions.clearCustomersAction());\n    resolve();\n  });\n};\n\nconst loadCustomers = (\n  page: number = 1,\n  limit: number = 5,\n  order: OrderType = 'asc',\n  invalidateCache: boolean = false\n): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (!invalidateCache && isPageCached(page, limit)) {\n      resolve();\n    } else {\n      customerApi.loadCustomers(page, limit, order).then(\n        (customers) => {\n          store.dispatch(\n            customerActions.loadCustomersAction({\n              customers,\n            })\n          );\n          resolve();\n        },\n        (error) => {\n          console.log(error);\n          reject();\n        }\n      );\n    }\n  });\n};\n\nconst loadCustomer = (customerId: number, invalidateCache: boolean = false): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (!invalidateCache && isEntityCached(customerId)) {\n      resolve();\n    } else {\n      customerApi.loadCustomer(customerId).then(\n        (customer) => {\n          store.dispatch(\n            customerActions.loadCustomerAction({\n              customer,\n            })\n          );\n          resolve();\n        },\n        (error) => {\n          console.log(error);\n          reject();\n        }\n      );\n    }\n  });\n};\n\nconst saveCustomer = (customer: Customer): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    customerApi.saveCustomer(customer).then(\n      (customerId) => {\n        store.dispatch(\n          customerActions.saveCustomerAction({\n            customerId,\n            customer,\n          })\n        );\n        resolve();\n      },\n      (error) => {\n        console.log(error);\n        reject();\n      }\n    );\n  });\n};\n\nconst updateCustomer = (customer: Customer): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    customerApi.updateCustomer(customer).then(\n      () => {\n        store.dispatch(\n          customerActions.updateCustomerAction({\n            customer,\n          })\n        );\n        resolve();\n      },\n      (error) => {\n        console.log(error);\n        reject();\n      }\n    );\n  });\n};\n\nconst deleteCustomer = (customerId: number): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    customerApi.deleteCustomer(customerId).then(\n      (customer) => {\n        store.dispatch(\n          customerActions.deleteCustomerAction({\n            customerId,\n          })\n        );\n        resolve();\n      },\n      (error) => {\n        console.log(error);\n        reject();\n      }\n    );\n  });\n};\n\nconst isPageCached = (page: number, limit: number): boolean => {\n  return store.getState().ui.customerList.customerIds.length >= page * limit;\n};\n\nconst isEntityCached = (customerId: number): boolean => {\n  return !!store.getState().entities.customers.byId[customerId];\n};\n\nexport const customerCommands = {\n  clearCustomers,\n  loadCustomers,\n  loadCustomer,\n  saveCustomer,\n  updateCustomer,\n  deleteCustomer,\n};\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Customer } from '../../customer/customer.types';\nimport '../../../theme/index.scss';\n\ntype Props = {\n  customer: Customer;\n};\n\nexport const BOCustomerListItem: FC<Props> = ({ customer }) => {\n  return (\n    <div className=\"listItem\">\n      <Link key={customer.id} to={`/customer/${customer.id}`}>\n        <div className=\"listTitle\">{customer.name}</div>\n        <div className=\"listText\">{customer.email}</div>\n        <div className=\"listText\">{customer.address}</div>\n      </Link>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './page-header.component.scss';\n\ntype Props = {\n  title: string;\n  backgroundImageUrl?: string;\n};\n\nexport const BOPageTitle: FC<Props> = ({ title, backgroundImageUrl = 'http://lorempixel.com/1500/1000' }) => {\n  return (\n    <div className=\"pageHeader\">\n      <img className=\"pageImage\" src={backgroundImageUrl} />\n      <div className=\"pageTitle\">{title}</div>\n    </div>\n  );\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ApplicationStore } from '../../../store/store';\nimport { customerCommands } from '../../customer/customer.commands';\nimport { Customer } from '../../customer/customer.types';\nimport { BOCustomerListItem } from './customer-list-item.component';\nimport { useHistory } from 'react-router-dom';\nimport { BOPageTitle } from '../../shared/components/page-header.component';\nimport '../../../theme/index.scss';\n\nconst LIMIT = 10;\nconst IMAGE_URL = 'https://bit.ly/33sx3Vu';\n\nexport const BOCustomerList: FC = () => {\n  const history = useHistory();\n\n  const customers = useSelector<ApplicationStore, Customer[]>((state) => {\n    const customerIds = state.ui.customerList.customerIds;\n    return customerIds?.map((customerId) => state.entities.customers.byId[customerId]);\n  });\n\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    setLoading(true);\n    if (page === 1) {\n      customerCommands.clearCustomers();\n    }\n    customerCommands.loadCustomers(page, LIMIT).then(\n      () => setLoading(false),\n      () => setError(true)\n    );\n  }, [page]);\n\n  const incrementPage = () => setPage(page + 1);\n  const createCustomer = () => history.push('/customer');\n\n  return (\n    <>\n      <BOPageTitle title=\"Customers\" backgroundImageUrl={IMAGE_URL} />\n      <div className=\"page\">\n        <button onClick={createCustomer}>Create customer</button>\n\n        {isLoading && !customers?.length && <div>Loading customers...</div>}\n        {isError && <div>Error loading customers, please refresh page.</div>}\n\n        <div className=\"list\">\n          {customers?.map((customer: Customer) => (\n            <BOCustomerListItem key={customer.id} customer={customer} />\n          ))}\n        </div>\n\n        {customers?.length > 0 && (\n          <div>\n            {isLoading ? <div>Loading customers...</div> : <button onClick={incrementPage}>Load next {LIMIT}</button>}\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import axios from 'axios';\nimport { OrderType } from '../shared/shared.types';\nimport { Product } from './product.types';\n\nconst loadProducts = (page: number, limit: number, order: OrderType): Promise<Product[]> =>\n  axios.get<Product[]>(`/products?_page=${page}&_limit=${limit}&_sort=name&_order=${order}`).then(({ data }) => data);\n\nconst loadProduct = (productId: number): Promise<Product> =>\n  axios.get(`/products/${productId}`).then(({ data }) => data);\n\nconst saveProduct = (product: Product): Promise<number> => axios.post('/products', product).then(({ data }) => data);\n\nconst updateProduct = (product: Product): Promise<number> =>\n  axios.put(`/products/${product.id}/`, product).then(({ data }) => data);\n\nconst deleteProduct = (productId: number): Promise<void> =>\n  axios.delete(`/products/${productId}`).then(() => undefined);\n\nexport const productApi = { deleteProduct, loadProduct, loadProducts, saveProduct, updateProduct };\n","import { productActions } from './product.actions';\nimport { OrderType } from '../shared/shared.types';\nimport { store } from '../../store/store';\nimport { productApi } from './product.api';\nimport { Product } from './product.types';\n\nconst clearProducts = (): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    store.dispatch(productActions.clearProductsAction());\n    resolve();\n  });\n};\n\nconst loadProducts = (\n  page: number = 1,\n  limit: number = 5,\n  order: OrderType = 'asc',\n  invalidateCache: boolean = false\n): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (!invalidateCache && isPageCached(page, limit)) {\n      resolve();\n    } else {\n      productApi.loadProducts(page, limit, order).then(\n        (products) => {\n          store.dispatch(\n            productActions.loadProductsAction({\n              products,\n            })\n          );\n          resolve();\n        },\n        (error) => {\n          console.log(error);\n          reject();\n        }\n      );\n    }\n  });\n};\n\nconst loadProduct = (productId: number, invalidateCache: boolean = false): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (!invalidateCache && isEntityCached(productId)) {\n      resolve();\n    } else {\n      productApi.loadProduct(productId).then(\n        (product) => {\n          store.dispatch(\n            productActions.loadProductAction({\n              product,\n            })\n          );\n          resolve();\n        },\n        (error) => {\n          console.log(error);\n          reject();\n        }\n      );\n    }\n  });\n};\n\nconst saveProduct = (product: Product): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    productApi.saveProduct(product).then(\n      (productId) => {\n        store.dispatch(\n          productActions.saveProductAction({\n            productId,\n            product,\n          })\n        );\n        resolve();\n      },\n      (error) => {\n        console.log(error);\n        reject();\n      }\n    );\n  });\n};\n\nconst updateProduct = (product: Product): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    productApi.updateProduct(product).then(\n      () => {\n        store.dispatch(\n          productActions.updateProductAction({\n            product,\n          })\n        );\n        resolve();\n      },\n      (error) => {\n        console.log(error);\n        reject();\n      }\n    );\n  });\n};\n\nconst deleteProduct = (productId: number): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    productApi.deleteProduct(productId).then(\n      (product) => {\n        store.dispatch(\n          productActions.deleteProductAction({\n            productId,\n          })\n        );\n        resolve();\n      },\n      (error) => {\n        console.log(error);\n        reject();\n      }\n    );\n  });\n};\n\nconst isPageCached = (page: number, limit: number): boolean => {\n  return store.getState().ui.productList.productIds.length >= page * limit;\n};\n\nconst isEntityCached = (productId: number): boolean => {\n  return !!store.getState().entities.products.byId[productId];\n};\n\nexport const productCommands = {\n  clearProducts,\n  loadProducts,\n  loadProduct,\n  saveProduct,\n  updateProduct,\n  deleteProduct,\n};\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Product } from '../../product/product.types';\nimport '../../../theme/index.scss';\n\ntype Props = {\n  product: Product;\n};\n\nexport const BOProductListItem: FC<Props> = ({ product }) => {\n  return (\n    <div className=\"listItem\">\n      <Link key={product.id} to={`/product/${product.id}`}>\n        <div className=\"listTitle\">{product.name}</div>\n        <div className=\"listText\">{product.price} €</div>\n      </Link>\n    </div>\n  );\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ApplicationStore } from '../../../store/store';\nimport { productCommands } from '../../product/product.commands';\nimport { Product } from '../../product/product.types';\nimport { BOProductListItem } from './product-list-item.component';\nimport { useHistory } from 'react-router-dom';\nimport { BOPageTitle } from '../../shared/components/page-header.component';\nimport '../../../theme/index.scss';\n\nconst LIMIT = 10;\nconst IMAGE_URL = 'https://images.unsplash.com/photo-1501851602203-f40cf2f11ba9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80';\n\nexport const BOProductList: FC = () => {\n  const history = useHistory();\n\n  const products = useSelector<ApplicationStore, Product[]>((state) => {\n    const productIds = state.ui.productList.productIds;\n    return productIds?.map((productId) => state.entities.products.byId[productId]);\n  });\n\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    setLoading(true);\n    if (page === 1) {\n      productCommands.clearProducts();\n    }\n    productCommands.loadProducts(page, LIMIT).then(\n      () => setLoading(false),\n      () => setError(true)\n    );\n  }, [page]);\n\n  const incrementPage = () => setPage(page + 1);\n  const createProduct = () => history.push('/product');\n\n  return (\n    <>\n      <BOPageTitle title=\"Products\" backgroundImageUrl={IMAGE_URL} />\n      <div className=\"page\">\n        <button onClick={createProduct}>Create product</button>\n\n        {isLoading && !products?.length && <div>Loading products...</div>}\n        {isError && <div>Error loading products, please refresh page.</div>}\n\n        <div className=\"list\">\n          {products?.map((product: Product) => (\n            <BOProductListItem key={product.id} product={product} />\n          ))}\n        </div>\n\n        {products?.length > 0 && (\n          <div>\n            {isLoading ? <div>Loading products...</div> : <button onClick={incrementPage}>Load next {LIMIT}</button>}\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { ChangeEvent, FC, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { ApplicationStore } from '../../../store/store';\nimport { Customer } from '../../customer/customer.types';\nimport { customerCommands } from '../customer.commands';\nimport { useHistory } from 'react-router-dom';\nimport { BOPageTitle } from '../../shared/components/page-header.component';\nimport '../../../theme/index.scss';\n\nconst IMAGE_URL = 'https://bit.ly/33uC3J9';\n\nexport const BOCustomer: FC = () => {\n  const history = useHistory();\n  const { id: idString } = useParams<{ id: string }>();\n  const customerId = (idString && parseInt(idString)) || undefined;\n  const customer = useSelector<ApplicationStore, Customer | undefined>((state) => {\n    return (customerId && state.entities.customers.byId[customerId]) || undefined;\n  });\n  const emptyCustomer = { address: '', email: '', name: '' } as Customer;\n\n  const [isLoading, setLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState<string>();\n  const [isError, setError] = useState(false);\n  const [modifiedCustomer, setModifiedCustomer] = useState<Customer>(emptyCustomer);\n\n  useEffect(() => {\n    if (customerId) {\n      setLoadingStatus(true, 'Loading customer...');\n      customerCommands.loadCustomer(customerId).then(\n        () => setLoadingStatus(false),\n        () => setError(true)\n      );\n    }\n  }, [customerId]);\n\n  useEffect(() => {\n    customer && setModifiedCustomer(customer);\n  }, [customer]);\n\n  const setLoadingStatus = (status: boolean, message?: string) => {\n    setLoading(status);\n    message && setLoadingMessage(message);\n  };\n\n  const onFieldChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const field = event.target.name;\n    const value = event.target.value;\n    modifiedCustomer && setModifiedCustomer({ ...modifiedCustomer, [field]: value });\n  };\n\n  const navigateBack = () => history.goBack();\n  const navigateToCustomers = () => history.push('/customers');\n\n  const onSave = () => {\n    if (customer) {\n      setLoadingStatus(true, 'Updating customer...');\n      modifiedCustomer &&\n        customerCommands\n          .updateCustomer(modifiedCustomer)\n          .then(\n            () => setLoadingStatus(false),\n            () => setError(true)\n          )\n          .then(navigateBack);\n    } else {\n      setLoadingStatus(true, 'Saving customer...');\n      modifiedCustomer &&\n        customerCommands\n          .saveCustomer(modifiedCustomer)\n          .then(\n            () => setLoadingStatus(false),\n            () => setError(true)\n          )\n          .then(navigateBack);\n    }\n  };\n\n  const onDelete = () => {\n    setLoadingStatus(true, 'Deleting customer...');\n    customer &&\n      customerCommands\n        .deleteCustomer(customer.id)\n        .then(\n          () => setLoadingStatus(false),\n          () => setError(true)\n        )\n        .then(navigateToCustomers);\n  };\n\n  if (isLoading === true) {\n    return <div>{loadingMessage}</div>;\n  }\n\n  if (isError) {\n    return <div>Error loading customer, please refresh page.</div>;\n  }\n\n  return (\n    <>\n      <BOPageTitle title=\"Edit Customer\" backgroundImageUrl={IMAGE_URL} />\n\n      {modifiedCustomer && (\n        <form className=\"pageForm\" onSubmit={onSave}>\n          {modifiedCustomer.id && (\n            <div className=\"formField\">\n              <div className=\"formLabel\">\n                <label>Id</label>\n              </div>\n              <input className=\"formInput\" type=\"text\" value={modifiedCustomer.id} disabled />\n            </div>\n          )}\n          <div className=\"formField\">\n            <div className=\"formLabel\">\n              <label>Name</label>\n            </div>\n            <input\n              className=\"formInput\"\n              type=\"text\"\n              name=\"name\"\n              value={modifiedCustomer.name}\n              onChange={onFieldChange}\n            />\n          </div>\n          <div className=\"formField\">\n            <div className=\"formLabel\">\n              <label>Email</label>\n            </div>\n            <input\n              className=\"formInput\"\n              type=\"text\"\n              name=\"email\"\n              value={modifiedCustomer.email}\n              onChange={onFieldChange}\n            />\n          </div>\n          <div className=\"formField\">\n            <div className=\"formLabel\">\n              <label>Address</label>\n            </div>\n            <input\n              className=\"formInput\"\n              type=\"text\"\n              name=\"address\"\n              value={modifiedCustomer.address}\n              onChange={onFieldChange}\n            />\n          </div>\n          <button className=\"formButton\" type=\"submit\">\n            Save\n          </button>\n          {customerId && (\n            <button className=\"formButton\" onClick={onDelete}>\n              Delete\n            </button>\n          )}\n        </form>\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { ApplicationStore } from '../../../store/store';\nimport { authCommands } from '../../auth/auth.commands';\nimport './header.component.scss';\n\nexport const BOHeader: FC = () => {\n  const history = useHistory();\n  const isAuthenticated = useSelector<ApplicationStore, boolean>((state) => state.ui.auth.isAuthenticated);\n\n  const logout = () => {\n    authCommands.logout().then(() => history.push('/login'));\n  };\n\n  return isAuthenticated ? (\n    <div className=\"header\">\n      <div className=\"headerTitle\">backoffice</div>\n      <div className=\"headerNavigation\">\n        <div className=\"headerNavigationItem\">\n          <Link className=\"buttonLink\" to=\"/customers\">\n            Customers\n          </Link>\n        </div>\n        <div className=\"headerNavigationItem\">\n          <Link className=\"buttonLink\" to=\"/products\">\n            Products\n          </Link>\n        </div>\n        <div className=\"headerNavigationItem\">\n          <button className=\"buttonLink\" onClick={logout}>\n            Logout\n          </button>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <></>\n  );\n};\n","import React, { ChangeEvent, FC, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { ApplicationStore } from '../../../store/store';\nimport { Product } from '../../product/product.types';\nimport { productCommands } from '../product.commands';\nimport { useHistory } from 'react-router-dom';\nimport { BOPageTitle } from '../../shared/components/page-header.component';\nimport '../../../theme/index.scss';\n\nconst IMAGE_URL = 'https://bit.ly/2GyBHs6';\n\nexport const BOProduct: FC = () => {\n  const history = useHistory();\n  const { id: idString } = useParams<{ id: string }>();\n  const productId = (idString && parseInt(idString)) || undefined;\n  const product = useSelector<ApplicationStore, Product | undefined>((state) => {\n    return (productId && state.entities.products.byId[productId]) || undefined;\n  });\n  const emptyProduct = { name: '', photo: '', price: 0 } as Product;\n\n  const [isLoading, setLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState<string>();\n  const [isError, setError] = useState(false);\n  const [modifiedProduct, setModifiedProduct] = useState<Product>(emptyProduct);\n\n  useEffect(() => {\n    if (productId) {\n      setLoadingStatus(true, 'Loading product...');\n      productCommands.loadProduct(productId).then(\n        () => setLoadingStatus(false),\n        () => setError(true)\n      );\n    }\n  }, [productId]);\n\n  useEffect(() => {\n    product && setModifiedProduct(product);\n  }, [product]);\n\n  const setLoadingStatus = (status: boolean, message?: string) => {\n    setLoading(status);\n    message && setLoadingMessage(message);\n  };\n\n  const onFieldChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const field = event.target.name;\n    const value = event.target.value;\n    modifiedProduct && setModifiedProduct({ ...modifiedProduct, [field]: value });\n  };\n\n  const navigateBack = () => history.goBack();\n  const navigateToProducts = () => history.push('/products');\n\n  const onSave = () => {\n    if (product) {\n      setLoadingStatus(true, 'Updating product...');\n      modifiedProduct &&\n        productCommands\n          .updateProduct(modifiedProduct)\n          .then(\n            () => setLoadingStatus(false),\n            () => setError(true)\n          )\n          .then(navigateBack);\n    } else {\n      setLoadingStatus(true, 'Saving product...');\n      modifiedProduct &&\n        productCommands\n          .saveProduct(modifiedProduct)\n          .then(\n            () => setLoadingStatus(false),\n            () => setError(true)\n          )\n          .then(navigateBack);\n    }\n  };\n\n  const onDelete = () => {\n    setLoadingStatus(true, 'Deleting product...');\n    product &&\n      productCommands\n        .deleteProduct(product.id)\n        .then(\n          () => setLoadingStatus(false),\n          () => setError(true)\n        )\n        .then(navigateToProducts);\n  };\n\n  if (isLoading === true) {\n    return <div>{loadingMessage}</div>;\n  }\n\n  if (isError) {\n    return <div>Error loading product, please refresh page.</div>;\n  }\n\n  return (\n    <>\n      <BOPageTitle title=\"Edit Product\" backgroundImageUrl={IMAGE_URL} />\n\n      {modifiedProduct && (\n        <form className=\"pageForm\" onSubmit={onSave}>\n          {modifiedProduct.id && (\n            <div className=\"formField\">\n              <div className=\"formLabel\">\n                <label>Id</label>\n              </div>\n              <input className=\"formInput\" type=\"text\" value={modifiedProduct.id} disabled />\n            </div>\n          )}\n          <div className=\"formField\">\n            <div className=\"formLabel\">\n              <label>Name</label>\n            </div>\n            <input\n              className=\"formInput\"\n              type=\"text\"\n              name=\"name\"\n              value={modifiedProduct.name}\n              onChange={onFieldChange}\n            />\n          </div>\n          <div className=\"formField\">\n            <div className=\"formLabel\">\n              <label>Price</label>\n            </div>\n            <input\n              className=\"formInput\"\n              type=\"text\"\n              name=\"price\"\n              value={modifiedProduct.price}\n              onChange={onFieldChange}\n            />\n          </div>\n          <div className=\"formField\">\n            <div className=\"formLabel\">\n              <label>Photo</label>\n            </div>\n            <input\n              className=\"formInput\"\n              type=\"text\"\n              name=\"photo\"\n              value={modifiedProduct.photo}\n              onChange={onFieldChange}\n            />\n          </div>\n          <button className=\"formButton\" type=\"submit\">\n            Save\n          </button>\n          {productId && (\n            <button className=\"formButton\" onClick={onDelete}>\n              Delete\n            </button>\n          )}\n        </form>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { PrivateRoute } from './modules/auth/components/private-route.component';\nimport { BOLogin } from './modules/auth/components/login.component';\nimport { BOCustomerList } from './modules/customer-list/components/customer-list.component';\nimport { BOProductList } from './modules/product-list/components/product-list.component';\nimport { BOCustomer } from './modules/customer/components/customer.component';\nimport { BOHeader } from './modules/header/components/header.component';\nimport { BOProduct } from './modules/product/components/product.component';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <HashRouter>\n        <div className=\"app\">\n          <div className=\"appContent\">\n            <BOHeader />\n            <Switch>\n              <Route exact path=\"/login\" component={BOLogin} />\n              <PrivateRoute path=\"/customers\" component={BOCustomerList} />\n              <PrivateRoute path=\"/customer/:id\" component={BOCustomer} />\n              <PrivateRoute path=\"/customer\" exact component={BOCustomer} />\n              <PrivateRoute path=\"/products\" component={BOProductList} />\n              <PrivateRoute path=\"/product/:id\" component={BOProduct} />\n              <PrivateRoute path=\"/product\" exact component={BOProduct} />\n              <Redirect from=\"/\" to=\"/customers\" />\n            </Switch>\n          </div>\n        </div>\n      </HashRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}